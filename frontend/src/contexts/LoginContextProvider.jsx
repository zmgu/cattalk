/*
 *  Î°úÍ∑∏Ïù∏ 
 *  ‚úÖ Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
 *  ‚úÖ Î°úÍ∑∏Ïù∏
 *  ‚úÖ Î°úÍ∑∏ÏïÑÏõÉ
 *  
 *  üîê Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
 *  üîì Î°úÍ∑∏ÏïÑÏõÉ ÏÑ∏ÌåÖ
 */ 

import React, { createContext, useEffect, useState } from 'react';
import * as auth from '../apis/auth';

export const LoginContext = createContext();
LoginContext.displayName = 'LoginContextName'


const LoginContextProvider = ({ children }) => {

    // Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä
    const [isLogin, setLogin] = useState(false);

    // Ïú†Ï†Ä Ï†ïÎ≥¥
    const [userInfo, setUserInfo] = useState(null)

    /* 
        ‚úÖ Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
    */
    const loginCheck = async () => {

        let response
        let userData
        
        /*
            Ïú†Ï†ÄÏ†ïÎ≥¥ ÏöîÏ≤≠
            ÏóëÏÑ∏Ïä§ ÌÜ†ÌÅ∞Í≥º Î¶¨ÌîÑÎûòÏãú ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÎã§Î©¥ Í∞ÄÏ†∏Ïò¥
        */

        try {
            response = await auth.info()
        } catch (error) {
            console.log(`Î°úÍ∑∏Ïù∏ ÏóêÎü¨ : ${error}`);
            console.log(`Î°úÍ∑∏Ïù∏ ÏóêÎü¨ ÏÉÅÌÉú : ${response.status}`);
            return;
        }

        userData = response.data
        console.log(`userData : ${userData}`); // Ï∂îÌõÑ ÏßÄÏö∏ Î∂ÄÎ∂Ñ

        // ‚ùå Ïù∏Ï¶ù Ïã§Ìå®
        if( userData == 'UNAUTHRIZED' || response.status == 401 ) {
            console.error(`accessTokenÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.`);
            return
        }

        // ‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ
        console.log(`Ïù∏Ï¶ù ÏÑ±Í≥µ`);

        // Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
        loginSetting(userData)
    }


    // üîê Î°úÍ∑∏Ïù∏ ÏÑ∏ÌåÖ
    const loginSetting = (userData) => {

        const { username, nickname, role } = userData

        console.log(`username : ${username}`);
        console.log(`nickname : ${nickname}`);
        console.log(`role : ${role}`);

        // üë©‚Äçüíºüîê Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä : true
        setLogin(true)
        
        // üë©‚Äçüíº‚úÖ Ïú†Ï†ÄÏ†ïÎ≥¥ ÏÑ∏ÌåÖ
        const updatedUserInfo = {username, nickname, role}
        setUserInfo(updatedUserInfo)

        // üëÆ‚Äç‚ôÄÔ∏è‚úÖ Í∂åÌïúÏ†ïÎ≥¥ ÏÑ∏ÌåÖ
        const updatedRoles = { isUser : false, isAmdin : false }
        

            if( role == 'ROLE_USER' ) updatedRoles.isUser = true;
            if( role == 'ROLE_ADMIN' ) updatedRoles.isAdmin = true;

        // setRoles(updatedRoles)
    }

    useEffect( () => {
    
        // Î°úÍ∑∏Ïù∏ Ï≤¥ÌÅ¨
        loginCheck()
    
    }, [])

    return ( 
        <LoginContext.Provider value={ {isLogin, userInfo, loginCheck} }>
            {children}
        </LoginContext.Provider>
    )
}

export default LoginContextProvider